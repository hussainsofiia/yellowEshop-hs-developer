import Header from "../components/head/Header"
import Head from "next/head";
import Image from "next/image";
import { useDispatch, useSelector } from "react-redux";
import ReactImageMagnify from 'react-image-magnify';
import { useEffect, useState } from "react";
import { adddetailsqty, addToCK, addTotestRedux, selectDetails, selectrelated, selectSearchDetails } from "../reduxStore/detailsStore";
import {ChevronRightIcon, StarIcon} from "@heroicons/react/solid";
import SearchResult from "../components/head/SearchResult";
import apiData from "../public/apiData.json"
import {PlusIcon,MinusIcon, BadgeCheckIcon, CashIcon, LocationMarkerIcon } from "@heroicons/react/outline";
import { useRouter } from "next/router";
import { addckout, addQuantityToItem, addTocartRedux, selectCartItems, selectitemqty, subtractQuantityFromItem } from "../reduxStore/productReduc";
import Currency from "react-currency-formatter";
import RelatedPagination from "../components/details/RelatedPagination";

import Footer from "../components/Footer";


const MAX_RATING = 500;
const MIN_RATING = 1;
const MAX_RATINGStar = 5;
const MIN_RATINGstar = 1;
function Details({data}) {

  
      //redux
      const datafromRedux = useSelector(selectDetails);
      const relatedproducts = useSelector(selectrelated);
      const [qtyredux] = useSelector(selectCartItems);
      const dispatch = useDispatch();

      



    //react state
    const [selectImg,setSelectImg]=useState(datafromRedux.image[0]);
    const [datastore, setDatastore] = useState(datafromRedux);
    const router = useRouter();



    //In Stock function
    const [stock,setStock] = useState(true);
 
  useEffect(() => {
    setDatastore(datafromRedux);
    setSelectImg(datafromRedux.image[0]);
    
    if(datastore.instock > 0) {
      setStock(false);
    }

    
  }, [datafromRedux,datastore.instock,stock,setStock])

    //random ratting number

    const [ratingNumber] = useState(
        Math.floor(Math.random() * (MAX_RATING - MIN_RATING + 1)) +MIN_RATING
    );
    

    //answer question

    const [answerNumber] = useState(
        Math.floor(Math.random() * (MAX_RATING - MIN_RATING + 1)) +MIN_RATING
    );

    //related items show
    const [productData]=useState(relatedproducts);

    //add button 

    const [showINC,setShowINC] = useState(false);
    const [lodingShow, setlodingShow]=useState(false);

    ///from child call back
   const toogle = () => {
   
    setShowINC(false);
   }
   const qtytoogle = () => {
   
    setQuantity(1);
   
   }
   ///add redux checkout store

   const addredux = () =>{

   dispatch(addTocartRedux(
      datastore,
    ));
    setShowINC(true);
    
   }

   const addtobuy = () =>{

    dispatch(addTocartRedux(
       datastore,
     ));
     router.push(`/checkout?title=${datafromRedux.id,datafromRedux.title}`)
     setlodingShow(true);
    }


const [quantity, setQuantity]= useState(1)
   
const incadd = () => {
  dispatch(addQuantityToItem(datafromRedux.id,datafromRedux.quantity));
  setQuantity(quantity+1)
  
  
}
const decadd = () => {
  dispatch(subtractQuantityFromItem(datafromRedux.id,datafromRedux.quantity))
  if(quantity > 1){
    setQuantity(quantity-1)
  }

}





const discound = () => {
  return (Math.abs(((1-(datastore.discountPrice/100))-1)*100)).toFixed(2);
}
const finalDiscound = () => {
  return (datastore.price - (datastore.price*discound()/100)).toFixed(2);
}







    return (
        <div className="relative">
            <Head>
            <title  > {data.title.title} </title>
             <meta name="description" content="Generated by Hs-developer" />
        {data.settings?.map(({id,icon})=>(
         <link key={id} rel="icon" href={icon[0]} />
      ))}
      </Head>
            <Header
             posts={data.products}
             settings={data.settings} 
             button={data.headerPart2}
             siteButton={data.siteBerButton}/>
         <div className="max-h-full max-w-screen-2xl mx-auto">
            {/*Body main part details*/}

            {datafromRedux.length === 0 ? <h2 className='flex flex-grow text-center 
            justify-center mt-10 font-bold text-white bg-gray-800'>Your Eshop Basket is empty</h2>: <> 

            <main className='sm:flex-grow overflow-hidden md:  p-2   max-w-screen-2xl mx-auto'>
           

            <div className="flex space-x-2 items-center">
              <p className='link text-sm'>{datastore.type}  </p> 
              <ChevronRightIcon className="h-4"/>
              <p className='link text-sm'>{datastore.category}</p>
             </div>
             {/*Body details part*/}

             <div className='grid items-start  grid-flow-row-dense md:grid-cols-2
              gap-x-4 justify-self-center lg:grid-cols-5 gap-4 xl:grid-cols-5 mx-auto'>

            {/* left photo part*/}

            <div className='sm:black  md:flex justify-center mt-10 space-x-5 col-span-2 '>
             <div className="flex h-100 w-100 justify-center z-10 border-2 border-gray-900">
             <ReactImageMagnify  {...{
                       smallImage: {
                       alt: 'Hs_Developer',
                      isFluidWidth: true,
                       src: [selectImg], },
                        largeImage: {
                        src: [selectImg],
                         width: 1200,
                         height: 1800, }, 
                         shouldUsePositiveSpaceLens: true,
                        enlargedImageContainerDimensions: {
                           width: '200%',
                           height: '100%' } }} />
         </div>

         <div className='p-2 overflow-x-auto flex justify-between   md:flex-col items-center  '>
          
          {/*here will be yet 4 pic*/}
         { datafromRedux.image && datafromRedux.image.map((img,i)=>(
  <img key={i} width={100} height={100} objectFit="contain" className={`
  ${selectImg === img ? 'border-2 border-red-700  cursor-pointer' : ' cursor-pointer  '}`} 
  src={img} 
  
  onClick={()=>setSelectImg(img)} alt="images"/>
         ))}
        

                  
         </div> 
        </div>

         {/* middle part*/}
    <div className="mt-10 col-span-2 space-y-2 ">
          <h2 className='font-medium'>
          {datastore.title}</h2>

            <div className="flex space-x-5 ">

                {/*ratting part*/}
                <div className="flex"> 

          {Array(datastore.rating).fill().map((_, i)=> (
         <StarIcon key={i} className="h-5 text-yellow-500"/>  ) )}  </div>

     <p className=" text-blue-700 link"> <span>{ratingNumber}</span> ratings</p>
                <p className=" text-blue-700 link"> <span>{answerNumber}</span> answered questions</p>
            </div>
            <div className="flex space-x-2">
                <span className=" font-medium bg-gray-900 text-white p-1 rounded-br-3xl">{`Premium's`} <span className="text-yellow-600 mr-2">Choice</span> </span>
                <p> {`"${datastore?.companyName}"`} </p>
            </div>
            <div>
    {data.settings?.map((item,id)=>(
   <div key={id} className="mb-5 font-bold flex space-x-2 "> 
            <span>Price:</span>
     <span className=" line-through text-gray-400">  <Currency  quantity={datastore?.price} currency={item.currency} /></span>
     <span>{discound()}% OFF </span>
     <span> <Currency  quantity= {finalDiscound()} currency={item.currency} /></span>
      
         </div>  ))}

         {data.settings?.map((item,id)=>(
           <div key={id}>
             <span className="flex  "> <Currency quantity={item.normalPrice}  currency={item.currency}  /> 
                <p className="ml-5"> {item.shippingNormal} </p>
                </span>
                <span className="flex font-medium " > <Currency quantity={item.urgentPrice}  currency={item.currency}  /> 
                <p className="ml-5"> {item.shippingUrgent} </p>
                </span>
           </div>
        
         ))}
        
                <p className=" text-blue-700 cursor-pointer">Details</p>
            </div>
            <div>
                <p className="font-bold">About this item:</p>

                <p>
            {datastore.description}</p>
            </div>


    </div>

       {/* right part*/}
       
       <div className='border-2 border-gray-400 rounded-xl p-5 space-y-2 '>
         {data.settings?.map((item,id)=>(
            <p key={id} className="text-red-600"><Currency className="" quantity= {finalDiscound()} currency={item.currency} /></p>
         ))}
             
             <span className="flex space-x-2">   
               <BadgeCheckIcon className='h-14 w-14 text-blue-700' />
               <p className="flex flex-col"> <span className="font-medium"> Top Rated Plus</span> 
               Trusted seller, fast shipping, and easy returns</p>
             </span>
             <span className="flex space-x-2">
               <CashIcon className="h-14 w-14 text-blue-700" />
               <p className="flex flex-col"> <span className="font-medium"> Money Back Guarantee</span> 
               Get the item you ordered or get your money back.</p>
             </span>
           
              <p className="text-green-700 hover:text-red-600 cursor-pointer">Details </p>
           {data.settings?.map((item,id)=>(
             <div  key={id}  className='flex space-x-2'> 
             <LocationMarkerIcon className="h-7 w-7" />
             <p className='text-blue-600 cursor-pointer hover:text-red-600'> Deliver to {item.country} </p>
             
             </div>
           ))}
              {data.settings?.map((item,id)=>(
            <p key={id} className='font-medium text-xs'>Arrives: <span className="font-normal  text-xs">{item.shippingNormal} </span>  </p>
              ))}
            

            { (datastore.instock > 0) ? <p className='font-bold text-green-700'>In Stock.{Number(datastore.instock)}</p> : 
            <p className="text-red-600 font-medium">Not in stock</p>

            }

             

              <div className='flex flex-col space-y-2'>
            {showINC && 
             <div className="flex justify-center space-x-8">
                <PlusIcon onClick={incadd} className=" h-8 text-black  border-2 border-gray-700 rounded-full cursor-pointer hover:bg-yellow-600 hover:text-white " />
             
             
     <span   className="font-medium text-lg"> {[quantity]}</span>
             
    
             
           
              <MinusIcon onClick={decadd} className="h-8 text-black border-2 border-gray-700 rounded-full cursor-pointer hover:bg-yellow-600 hover:text-white " />
             </div> }

           


              {!showINC &&
              <button disabled={(!datastore.instock > 0)} onClick={addredux} className={`
         ${(datastore.instock > 0) ? 'button mt-2 ' : ' bg-red-300 from-red-300 to-red-500 border-gray-300 text-gray-400 cursor-not-allowed' }`}>
          {(datastore.instock > 0)  ?  'Add to Cart' : 'Stock finished' }
         </button> }


              <button disabled={(!datastore.instock > 0)} onClick={addtobuy} className='button font-medium flex justify-center  items-center '>

             {lodingShow ?    <span className="relative flex justify-center">Loading  <span className="absolute -right-7 text-white  animate-spin">... </span></span> :' Buy Now'    }

                
            
                
                </button>
                
               
             </div>
           
    </div>


{/*End body all up inside*/}
             </div>

            </main>
            </>}
            {/*Search box*/}

            <SearchResult posts={data.products} toogle={toogle}   qtytoogle={qtytoogle} />
            <div className="border-t-2 border-gray-800  ">
              <div className="p-5" >
              <p className=" text-lg font-bold text-yellow-600">Products related to this item</p>
              </div>
           

              <div className="flex " >
              <RelatedPagination  
              settings={data.settings}
             qtytoogle={qtytoogle}
             toogle={toogle} />
           
            </div>

              
            
            </div> </div>
            <footer >
      <Footer settings={data.settings} />
      </footer>
        </div>
    )
}

export default Details



export async function getStaticProps(context) {
  
  const data = apiData

  return {
    props: { data }, 
  }
}